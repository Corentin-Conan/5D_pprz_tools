# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tracking import tracking_pb2 as tracking_dot_tracking__pb2


class CollectorStub(object):
    """Collector service enables the exchange of surveillance updates with a collector service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectProvider = channel.stream_stream(
                '/tracking.Collector/ConnectProvider',
                request_serializer=tracking_dot_tracking__pb2.Update.FromProvider.SerializeToString,
                response_deserializer=tracking_dot_tracking__pb2.Update.ToProvider.FromString,
                )
        self.ConnectProcessor = channel.stream_stream(
                '/tracking.Collector/ConnectProcessor',
                request_serializer=tracking_dot_tracking__pb2.Update.FromProcessor.SerializeToString,
                response_deserializer=tracking_dot_tracking__pb2.Update.ToProcessor.FromString,
                )


class CollectorServicer(object):
    """Collector service enables the exchange of surveillance updates with a collector service.
    """

    def ConnectProvider(self, request_iterator, context):
        """ConnectProvider connects a stream of updates from a provider to a collector.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectProcessor(self, request_iterator, context):
        """ConnectProcessor connects a stream of updates from a collector to a processor.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectProvider': grpc.stream_stream_rpc_method_handler(
                    servicer.ConnectProvider,
                    request_deserializer=tracking_dot_tracking__pb2.Update.FromProvider.FromString,
                    response_serializer=tracking_dot_tracking__pb2.Update.ToProvider.SerializeToString,
            ),
            'ConnectProcessor': grpc.stream_stream_rpc_method_handler(
                    servicer.ConnectProcessor,
                    request_deserializer=tracking_dot_tracking__pb2.Update.FromProcessor.FromString,
                    response_serializer=tracking_dot_tracking__pb2.Update.ToProcessor.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tracking.Collector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Collector(object):
    """Collector service enables the exchange of surveillance updates with a collector service.
    """

    @staticmethod
    def ConnectProvider(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tracking.Collector/ConnectProvider',
            tracking_dot_tracking__pb2.Update.FromProvider.SerializeToString,
            tracking_dot_tracking__pb2.Update.ToProvider.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectProcessor(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tracking.Collector/ConnectProcessor',
            tracking_dot_tracking__pb2.Update.FromProcessor.SerializeToString,
            tracking_dot_tracking__pb2.Update.ToProcessor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
