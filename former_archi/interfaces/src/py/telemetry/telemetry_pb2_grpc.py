# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..telemetry import telemetry_pb2 as telemetry_dot_telemetry__pb2


class CollectorStub(object):
    """Collector exposes services that enable the reporting of telematic data.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectProvider = channel.stream_stream(
                '/telemetry.Collector/ConnectProvider',
                request_serializer=telemetry_dot_telemetry__pb2.Update.FromProvider.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.Update.ToProvider.FromString,
                )


class CollectorServicer(object):
    """Collector exposes services that enable the reporting of telematic data.
    """

    def ConnectProvider(self, request_iterator, context):
        """ConnectProvider connects a stream of updates from a  provider to a collector
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectProvider': grpc.stream_stream_rpc_method_handler(
                    servicer.ConnectProvider,
                    request_deserializer=telemetry_dot_telemetry__pb2.Update.FromProvider.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.Update.ToProvider.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telemetry.Collector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Collector(object):
    """Collector exposes services that enable the reporting of telematic data.
    """

    @staticmethod
    def ConnectProvider(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/telemetry.Collector/ConnectProvider',
            telemetry_dot_telemetry__pb2.Update.FromProvider.SerializeToString,
            telemetry_dot_telemetry__pb2.Update.ToProvider.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
